<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.reo.admin.member.dao.AdminMemberDAO">

	<select id="getAgeData" resultType="chart">
		SELECT age, COUNT(*) AS counts FROM (SELECT TRUNCATE((DATE_FORMAT(NOW(), '%Y') - 
		DATE_FORMAT(mem_birth, '%Y') + 1) / 10, 0) AS age FROM member 
		WHERE mem_birth IS NOT NULL ORDER BY age) AS age 
		GROUP BY age;
	</select>

	<select id="getTopPayData" resultType="chart">
		SELECT SUBSTR(off_stdAddr, 4, 3) AS gu, COUNT(*) AS counts 
		FROM office JOIN pay USING(off_no) 
		GROUP BY gu ORDER BY counts DESC, gu ASC LIMIT 5;
	</select>

	<select id="getLoginLog" parameterType="loginLog" resultType="loginLog">
		SELECT log_no, mem_email, log_date, log_ip FROM loginlog WHERE 
		(log_date BETWEEN #{fromDate} AND DATE_ADD(#{toDate}, INTERVAL 1 DAY))
		AND (${searchType} LIKE CONCAT('%', #{search}, '%')) 
		ORDER BY log_no DESC LIMIT #{LIMIT} OFFSET #{OFFSET}
	</select>

	<select id="getLoginLogListCount" parameterType="loginLog" resultType="int">
		SELECT COUNT(*) FROM loginlog WHERE 
		(log_date BETWEEN #{fromDate} AND DATE_ADD(#{toDate}, INTERVAL 1 DAY))
		AND (${searchType} LIKE CONCAT('%', #{search}, '%'))
	</select>

	<select id="getLoginDateCount" parameterType="int" resultType="chart">
		SELECT DATE_FORMAT(log_date, '%Y-%m-%d') AS dates, COUNT(*) AS counts FROM 
		loginlog WHERE log_date BETWEEN DATE_SUB(DATE_FORMAT(NOW(), '%Y-%m-%d'), 
		INTERVAL #{difDate} DAY) AND NOW() 
		GROUP BY DATE_FORMAT(log_date, '%Y-%m-%d')
	</select>

<!-- 	<select id="getLoginDateCount" parameterType="int" resultType="chart">
		SELECT dates, COUNT(dates) AS counts FROM 
		(SELECT mem_email, DATE_FORMAT(log_date, '%Y-%m-%d') AS dates 
		FROM loginlog WHERE log_date BETWEEN DATE_SUB(DATE_FORMAT(NOW(), '%Y-%m-%d'), INTERVAL #{difDate} DAY) AND NOW() 
		GROUP BY DATE_FORMAT(log_date, '%Y-%m-%d'), mem_email) count GROUP BY dates;
	</select> -->

	<select id="login" parameterType="auth" resultType="auth">
		SELECT mem_no, mem_email, mem_pw, mem_name, mem_sector, auth_role, auth_enabled, 
		auth_member, auth_pay, auth_reservation, auth_office, auth_qna FROM member 
		LEFT JOIN authority USING(mem_no) WHERE mem_email = #{mem_email}
	</select>

	<insert id="insertMember" parameterType="member">
		INSERT INTO member(mem_email, mem_name, mem_pw, mem_tel, mem_role, mem_zipcode,
		mem_roadaddress, mem_detailaddress, mem_birth, mem_sector, mem_agentName, mem_buisnessNo)
		VALUES (#{mem_email}, #{mem_name}, #{mem_pw}, #{mem_tel}, #{mem_role}, #{mem_zipcode}, 
		#{mem_roadaddress}, #{mem_detailaddress}, #{mem_birth}, #{mem_sector}, #{mem_agentName}, #{mem_buisnessNo})
	</insert>

	<update id="updateMember" parameterType="member">
		UPDATE member SET mem_tel = #{mem_tel}, mem_zipcode = #{mem_zipcode}, 
		mem_roadaddress = #{mem_roadaddress}, mem_detailaddress = #{mem_detailaddress} 
		WHERE mem_no = #{mem_no}
	</update>

	<delete id="deleteMember">
		DELETE FROM member WHERE mem_no = #{mem_no}
	</delete>

	<update id="initPassword" parameterType="member">
		UPDATE member SET mem_pw = #{mem_pw} WHERE mem_no = #{mem_no}
	</update>

	<select id="getMemberList" parameterType="map" resultType="member">
		SELECT * FROM member WHERE ${searchType} LIKE CONCAT('%', #{searchKeyword}, '%') ORDER BY mem_no DESC LIMIT ${LIMIT} OFFSET ${OFFSET}
	</select>

	<select id="getMemberListCount" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM member WHERE ${searchType} LIKE CONCAT('%', #{searchKeyword}, '%')
	</select>

	<select id="getMemberInfo" resultType="member">
		SELECT * FROM member WHERE mem_no = #{mem_no}
	</select>

	<select id="getMemberIdCheck" resultType="int">
		SELECT count(*) FROM member WHERE mem_email = #{mem_email}
	</select>

	<delete id="deleteMemberMulti" parameterType="List">
		<if test="list != null">
			DELETE FROM member WHERE mem_no IN 
			<foreach collection="list" item="mem_no" open="(" separator=", " close=")">
				#{mem_no}
			</foreach>
		</if>
	</delete>

	<select id="getMemberNamenNo" parameterType="String" resultType="Map">
		SELECT mem_name, mem_no FROM member WHERE mem_email = #{mem_email}
	</select>

	<select id="getAuthInfo" parameterType="String" resultType="auth">
		SELECT mem_no, mem_email auth_role, auth_enabled, auth_member, auth_pay, auth_reservation, 
		auth_office, auth_qna FROM authority LEFT JOIN member USING(mem_no) 
		WHERE mem_no = (SELECT mem_no FROM member WHERE mem_email = #{mem_email})
	</select>

	<insert id="insertAuth" parameterType="auth">
		INSERT INTO authority(mem_no, auth_role, auth_enabled, auth_member, auth_pay,
		auth_reservation, auth_office, auth_qna)
		VALUES ((SELECT mem_no FROM member WHERE mem_email = #{mem_email}), #{auth_role}, #{auth_enabled}, #{auth_member}, #{auth_pay}, #{auth_reservation}, 
		#{auth_office}, #{auth_qna})
	</insert>

	<update id="updateAuth" parameterType="auth">
		UPDATE authority SET auth_enabled = #{auth_enabled}, auth_member = #{auth_member}, auth_pay = #{auth_pay}, 
		auth_reservation = #{auth_reservation}, auth_office = #{auth_office}, auth_qna = #{auth_qna} WHERE mem_no = #{mem_no}
	</update>

	<update id="deleteAuth">
		UPDATE authority SET auth_enabled = 0 WHERE mem_no = #{mem_no}
	</update>

	<update id="deleteAuthMulti" parameterType="List">
		<if test="list != null">
			UPDATE authority SET auth_enabled = 0 WHERE mem_no IN 
			<foreach collection="list" item="mem_no" open="(" separator=", " close=")">
				#{mem_no}
			</foreach>
		</if>
	</update>

	<insert id="insertLoginLog" parameterType="loginLog">
		INSERT INTO loginlog (mem_email, log_ip) VALUES (#{mem_email}, #{log_ip});
	</insert>

</mapper>