<?xml version="1.0" encoding="UTF-8" ?> <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.reo.admin.pay.dao.AdminPayDAO">

	<select id="getPayList" parameterType="pay" resultType="pay">
		SELECT pay_no, pay.mem_email, off_name, pay_price, pay_state, pay_date FROM pay LEFT JOIN office USING(off_no)
		WHERE (pay_date BETWEEN #{fromDate} AND DATE_ADD(#{toDate}, INTERVAL 1 DAY))
		AND ((
		<choose>
			<when test="searchType == 'mem_email'">pay.${searchType} </when>
			<otherwise>${searchType} </otherwise>
		</choose>
		LIKE CONCAT('%', #{search}, '%')) 
		<if test="search == ''">
			OR (off_name IS NULL)
		</if>
		) ORDER BY pay_no DESC LIMIT #{LIMIT} OFFSET #{OFFSET}
	</select>

	<select id="getPayListCount" parameterType="pay" resultType="int">
		SELECT COUNT(*) as count FROM pay LEFT JOIN office USING(off_no)
		WHERE (pay_date BETWEEN #{fromDate} AND DATE_ADD(#{toDate}, INTERVAL 1 DAY))
		AND ((
		<choose>
			<when test="searchType == 'mem_email'">pay.${searchType} </when>
			<otherwise>${searchType} </otherwise>
		</choose>
		LIKE CONCAT('%', #{search}, '%')) 
		<if test="search == ''">
			OR (off_name IS NULL)
		</if>
		)
	</select>

	<select id="getPayInfo" resultType="pay">
		SELECT pay_no, res_no, pay.mem_email, pay.off_name, pay_price, pay_date, pay_type, 
		pay_card, pay_bin, pay_state, pay_tid, res_startdatetime, pay_remark, off_unit FROM (SELECT pay_no, res_no, pay.mem_email, off_name, 
		pay_price, pay_date, pay_type, pay_card, pay_bin, pay_state, pay_tid, pay_remark FROM pay LEFT JOIN office USING(off_no)
		WHERE 
		<choose>
			<when test="pay_no == null">
				res_no = #{res_no}
			</when>
			<otherwise>
				pay_no = #{pay_no}
			</otherwise>
		</choose>
		) pay LEFT JOIN reservation USING(res_no) ORDER BY pay_no DESC LIMIT 1
		
	</select>

	<update id="updatekPayType" parameterType="pay">
		UPDATE pay SET 
		<choose>
			<when test="pay_remark != null and !pay_remark.equals('')">
				pay_remark = #{pay_remark} 
			</when>
			<otherwise>
				pay_state = #{pay_state} 
			</otherwise>
		</choose>
		WHERE pay_no =  #{pay_no};
	</update>

	<select id="getContractMemberInfo" parameterType="String" resultType="Map">
		SELECT mem_tel, mem_roadaddress, mem_detailaddress, mem_birth 
		FROM member WHERE mem_email = #{mem_email}
	</select>

	<select id="getContractOfficeInfo" parameterType="String" resultType="Map">
		SELECT off_type, off_maxNum, mem_tel, mem_roadaddress, mem_detailaddress, office.mem_agentName, 
		mem_buisnessNo FROM office LEFT JOIN member USING(mem_email) WHERE off_no = 
		(SELECT off_no FROM pay WHERE pay_no = #{pay_no})
	</select>

	<!-- 
	SELECT auto_increment as 'pay_num' FROM information_schema.tables WHERE table_schema = DATABASE() AND table_name = 'pay'
	 -->

</mapper>